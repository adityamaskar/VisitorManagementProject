apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
type: Opaque
data:
  mysql-root-password: bXlzcWw=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-script
data:
  init-script.sql: |
    CREATE DATABASE IF NOT EXISTS `visitor-app-db`;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: react-runtime-config
data:
  runtime-config.js: |
    window.RUNTIME_CONFIG = {
        // REACT_APP_BASE_URL: "http://vp-app-service:8080" // here we are using some adjustment as we dont have a domain 
        // to handle the frontend side in minikube, 
        // first we get ip and port of the vp-app-service
        // and then use it here and deploy the yaml file again.    
        REACT_APP_BASE_URL: "http://127.0.0.1:64461"
    };
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vp-configs
data:
  db-url : "jdbc:mysql://mysql-service:3306/visitor-app-db"
  kafka-broker : "kafka-service1:9092"
  zipkin-url : "http://zipkin-service:9411"
  notification-service-url : "http://notification-app-service:1235/notify/tracking"

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
spec:
  serviceName: "zookeeper"
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: zookeeper:3.8.0
          ports:
            - containerPort: 2181
          env:
            - name: TICK_TIME
              value: "2000"
            - name: INIT_LIMIT
              value: "10"
            - name: SYNC_LIMIT
              value: "5"
            - name: DATA_DIR
              value: "/var/lib/zookeeper"
            - name: CLIENT_PORT
              value: "2181"
            - name: MAX_CLIENT_CNXNS
              value: "60"
            - name: AUTOPURGE_PURGE_INTERVAL
              value: "24"
            - name: AUTOPURGE_SNAP_RETAIN_COUNT
              value: "3"
      volumes:
        - name: config
          configMap:
            name: vp-configs
        - name: data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  selector:
    app: zookeeper
  ports:
    - name: client
      port: 2181
      targetPort: 2181
  clusterIP: None
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka1
spec:
  serviceName: "kafka1"
  replicas: 1
  selector:
    matchLabels:
      app: kafka1
  template:
    metadata:
      labels:
        app: kafka1
    spec:
      containers:
        - name: kafka1
          image: confluentinc/cp-kafka:7.4.0
          ports:
            - containerPort: 9092
          volumeMounts:
            - name: data
              mountPath: /var/lib/kafka
          env:
            - name: KAFKA_BROKER_ID
              value: "0"  # Unique ID for this broker
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka-service1:9092"  # Required field to fix the error
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:9092"
            - name: KAFKA_LOG_DIRS
              value: "/var/lib/kafka/logs"  # Directory for Kafka logs
            - name: KAFKA_NUM_PARTITIONS
              value: "3"  # Default number of partitions per topic
            - name: KAFKA_NUM_NETWORK_THREADS
              value: "3"  # Number of network threads
            - name: KAFKA_NUM_IO_THREADS
              value: "8"  # Number of I/O threads
            - name: KAFKA_LOG_RETENTION_HOURS
              value: "168"  # Retention period for logs (in hours)
            - name: KAFKA_LOG_SEGMENT_BYTES
              value: "1073741824"  # Size of log segments (1 GB)
            - name: KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS
              value: "300000"  # Interval to check log retention (in ms)
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: "1"  # Default replication factor  for multi broker
            - name: KAFKA_OFFSET_METADATA_MAX_AGE_MS
              value: "10000"  # Maximum age of offset metadata
            - name: KAFKA_CONNECTION_MAX_IDLE_MS
              value: "10000"  # Maximum idle time for connections
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"  # Replication factor for offsets topic for multi broker
      volumes:
        - name: config
          configMap:
            name: vp-configs
        - name: data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service1
spec:
  selector:
    app: kafka1
  ports:
    - name: client
      port: 9092
      targetPort: 9092
  clusterIP: None  # Headless service for direct pod access
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: mysql-root-password
            - name: MYSQL_ROOT_HOST
              value: "%"
          volumeMounts:
            - name: init-script-volume
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: init-script-volume
          configMap:
            name: mysql-init-script
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service-deployment
  labels:
    app: notification-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: notification-app
  template:
    metadata:
      labels:
        app: notification-app
    spec:
      containers:
        - name: notification-app
          image: adityamaskar1/vp-notification-service:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 1235
          env:
            - name: spring.kafka.bootstrap-servers
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: kafka-broker
            - name: spring.zipkin.base-url
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: zipkin-url
---
apiVersion: v1
kind: Service
metadata:
  name: notification-app-service
spec:
  selector:
    app: notification-app
  ports:
    - protocol: TCP
      port: 1235
      targetPort: 1235
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vp-app-deployment
  labels:
    app: vp-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: vp-app
  template:
    metadata:
      labels:
        app: vp-app
    spec:
      initContainers:
        - name: wait-for-mysql
          image: busybox
          command: ['sh', '-c', 'until nc -z -v -w30 mysql-service 3306; do echo "Waiting for MySQL..."; sleep 5; done; echo "MySQL is up and running!"']
      containers:
        - name: vp-app
          image: adityamaskar1/visitor-management-project:3.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: spring.datasource.password
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: mysql-root-password
            - name: spring.datasource.url
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: db-url
            - name: spring.kafka.bootstrap-servers
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: kafka-broker
            - name: spring.zipkin.base-url
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: zipkin-url
            - name: notification-service-endpoint
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: notification-service-url
            - name: server.port
              value: "8080"
---
apiVersion: v1
kind: Service
metadata:
  name: vp-app-service
spec:
  type: LoadBalancer
  selector:
    app: vp-app
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 32002
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zipkin-deployment
  labels:
    app: zipkin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zipkin
  template:
    metadata:
      labels:
        app: zipkin
    spec:
      containers:
        - name: zipkin
          image: openzipkin/zipkin:latest
          ports:
            - containerPort: 9411
          env:
            - name: STORAGE_TYPE
              value: "mem"  # In-memory storage (customizable)
---
apiVersion: v1
kind: Service
metadata:
  name: zipkin-service
  labels:
    app: zipkin
spec:
  type: LoadBalancer
  ports:
    - port: 9411
      targetPort: 9411
      nodePort: 32003
  selector:
    app: zipkin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-app-deployment
  labels:
    app: react-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: react-app
  template:
    metadata:
      labels:
        app: react-app
    spec:
      containers:
        - name: react-app-container
          image: adityamaskar1/vp-react-ui:7.0
          volumeMounts:
            - name: runtime-config-volume
              mountPath: /usr/share/nginx/html/runtime-config.js
              subPath: runtime-config.js
          imagePullPolicy: Always
          ports:
            - containerPort: 80  # Nginx exposes port 80
      volumes:
        - name: runtime-config-volume
          configMap:
            name: react-runtime-config
---
apiVersion: v1
kind: Service
metadata:
  name: react-app-service
  labels:
    app: react-app
spec:
  type: LoadBalancer
  selector:
    app: react-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 32004
