apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
type: Opaque
data:
  mysql-root-password: bXlzcWw=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-script
data:
  init-script.sql: |
    CREATE DATABASE IF NOT EXISTS `visitor-app-db`;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vp-configs
#  name: eureka-configmap
#  namespace: default
data:
  discovery-service-url: "http://service-discovery-service:8761/eureka"
  db-url : "jdbc:mysql://mysql-service:3306/visitor-app-db"
  kafka-broker : "kafka:9092"
  zipkin-url : "http://zipkin-service:9411"


  zoo.cfg: |
    tickTime=2000
    initLimit=10
    syncLimit=5
    dataDir=/var/lib/zookeeper
    clientPort=2181
    maxClientCnxns=60
    autopurge.purgeInterval=24
    autopurge.snapRetainCount=3

  server.properties: |
    broker.id=0
    log.dirs=/var/lib/kafka/logs
    zookeeper.connect=zookeeper:2181
    num.partitions=1
    num.network.threads=3
    num.io.threads=8
    log.retention.hours=168
    log.segment.bytes=1073741824
    log.retention.check.interval.ms=300000
    default.replication.factor=1
    offset.metadata.max.age.ms=10000
    connection.max.idle.ms=10000
    advertised.listeners=PLAINTEXT://kafka:9092
    listeners=PLAINTEXT://0.0.0.0:9092
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
spec:
  serviceName: "zookeeper"
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: zookeeper:3.8.0
          ports:
            - containerPort: 2181
          volumeMounts:
            - name: data
              mountPath: /var/lib/zookeeper
            - name: config
              mountPath: /conf/zookeeper
              subPath: zoo.cfg
      volumes:
        - name: config
          configMap:
            name: vp-configs
        - name: data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  selector:
    app: zookeeper
  ports:
    - name: client
      port: 2181
      targetPort: 2181
  clusterIP: None  # Headless service for direct pod access
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
spec:
  serviceName: "kafka"
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:7.4.0
          ports:
            - containerPort: 9092
          volumeMounts:
            - name: data
              mountPath: /var/lib/kafka
            - name: config
              mountPath: /etc/kafka/server.properties  # Updated path to file
              subPath: server.properties               # File name reference
          env:
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka:9092"  # Required field to fix the error
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:9092"
      volumes:
        - name: config
          configMap:
            name: vp-configs
        - name: data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
spec:
  selector:
    app: kafka
  ports:
    - name: client
      port: 9092
      targetPort: 9092
  clusterIP: None  # Headless service for direct pod access
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: mysql-root-password
            - name: MYSQL_ROOT_HOST
              value: "%"
          volumeMounts:
            - name: init-script-volume
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: init-script-volume
          configMap:
            name: mysql-init-script
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service-deployment
  labels:
    app: notification-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notification-app
  template:
    metadata:
      labels:
        app: notification-app
    spec:
      containers:
        - name: notification-app
          image: adityamaskar1/vp-notification-service
          ports:
            - containerPort: 1235
          env:
            - name: eureka.client.serviceUrl.defaultZone
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: discovery-service-url
            - name: spring.kafka.bootstrap-servers
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: kafka-broker
            - name: spring.zipkin.base-url
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: zipkin-url
---
apiVersion: v1
kind: Service
metadata:
  name: notification-app-service
spec:
  selector:
    app: notification-service
  ports:
    - protocol: TCP
      port: 1235
      targetPort: 1235
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vp-app-deployment
  labels:
    app: vp-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vp-app
  template:
    metadata:
      labels:
        app: vp-app
    spec:
      containers:
        - name: vp-app
          image: adityamaskar1/visitor-management-project:latest
          ports:
            - containerPort: 8000
          env:
            - name: spring.datasource.password
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: mysql-root-password
            - name: eureka.client.serviceUrl.defaultZone
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: discovery-service-url
            - name: spring.datasource.url
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: db-url
            - name: spring.kafka.bootstrap-servers
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: kafka-broker
            - name: spring.zipkin.base-url
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: zipkin-url
            - name: server.port
              value: "8000"
---
apiVersion: v1
kind: Service
metadata:
  name: vp-app-service
spec:
  selector:
    app: vp-app
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zipkin-deployment
  labels:
    app: zipkin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zipkin
  template:
    metadata:
      labels:
        app: zipkin
    spec:
      containers:
        - name: zipkin
          image: openzipkin/zipkin:latest
          ports:
            - containerPort: 9411
          env:
            - name: STORAGE_TYPE
              value: "mem"  # In-memory storage (customizable)
---
apiVersion: v1
kind: Service
metadata:
  name: zipkin-service  # Service name different from Deployment
  labels:
    app: zipkin
spec:
  type: LoadBalancer  # Expose Zipkin through a LoadBalancer
  ports:
    - port: 9411
      targetPort: 9411
      nodePort: 32003
  selector:
    app: zipkin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-discovery-deployment
  labels:
    app: service-discovery
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service-discovery
  template:
    metadata:
      labels:
        app: service-discovery
    spec:
      containers:
        - name: service-discovery
          image: adityamaskar1/vp-discovery-server
          ports:
            - containerPort: 8761
---
apiVersion: v1
kind: Service
metadata:
  name: service-discovery-service
spec:
  type: LoadBalancer
  selector:
    app: service-discovery
  ports:
    - protocol: TCP
      port: 8761
      targetPort: 8761
      nodePort: 32001

