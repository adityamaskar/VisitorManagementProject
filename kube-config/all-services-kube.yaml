apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
type: Opaque
data:
  mysql-root-password: bXlzcWw=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-script
data:
  init-script.sql: |
    CREATE DATABASE IF NOT EXISTS `visitor-app-db`;
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vp-configs
#  name: eureka-configmap
#  namespace: default
data:
  discovery-service-url: "http://service-discovery-service:8761/eureka"
  db-url : "jdbc:mysql://mysql-service:3306/visitor-app-db"
  kafka-broker : "kafka-service1:9092"
#  ,kafka-service2:9092,kafka-service3:9092"
  zipkin-url : "http://zipkin-service:9411"


  zoo.cfg: |
    tickTime=2000
    initLimit=10
    syncLimit=5
    dataDir=/var/lib/zookeeper
    clientPort=2181
    maxClientCnxns=60
    autopurge.purgeInterval=24
    autopurge.snapRetainCount=3

  server.properties: |
    #broker.id="$(POD_NAME)"
    log.dirs=/var/lib/kafka/logs
    zookeeper.connect=zookeeper:2181
    num.partitions=3
    num.network.threads=3
    num.io.threads=8
    log.retention.hours=168
    log.segment.bytes=1073741824
    log.retention.check.interval.ms=300000
    default.replication.factor=1
    offset.metadata.max.age.ms=10000
    connection.max.idle.ms=10000
    offsets.topic.replication.factor=1
    advertised.listeners=PLAINTEXT://kafka-service1:9092
    listeners=PLAINTEXT://0.0.0.0:9092
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
spec:
  serviceName: "zookeeper"
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: zookeeper:3.8.0
          ports:
            - containerPort: 2181
          volumeMounts:
            - name: data
              mountPath: /var/lib/zookeeper
            - name: config
              mountPath: /conf/zookeeper
              subPath: zoo.cfg
      volumes:
        - name: config
          configMap:
            name: vp-configs
        - name: data
          emptyDir: {}
---

apiVersion: v1
kind: Service
metadata:
  name: zookeeper
spec:
  selector:
    app: zookeeper
  ports:
    - name: client
      port: 2181
      targetPort: 2181
  clusterIP: None  # Headless service for direct pod access
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka1
spec:
  serviceName: "kafka1"
  replicas: 1
  selector:
    matchLabels:
      app: kafka1
  template:
    metadata:
      labels:
        app: kafka1
    spec:
      containers:
        - name: kafka1
          image: confluentinc/cp-kafka:7.4.0
          ports:
            - containerPort: 9092
          volumeMounts:
            - name: data
              mountPath: /var/lib/kafka
#            - name: config
#              mountPath: /etc/kafka/server.properties  # Updated path to file
#              subPath: server.properties               # File name reference
          env:
            - name: KAFKA_BROKER_ID
              value: "0"  # Unique ID for this broker
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka-service1:9092"  # Required field to fix the error
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:9092"
            - name: KAFKA_LOG_DIRS
              value: "/var/lib/kafka/logs"  # Directory for Kafka logs
            - name: KAFKA_NUM_PARTITIONS
              value: "1"  # Default number of partitions per topic
            - name: KAFKA_NUM_NETWORK_THREADS
              value: "3"  # Number of network threads
            - name: KAFKA_NUM_IO_THREADS
              value: "8"  # Number of I/O threads
            - name: KAFKA_LOG_RETENTION_HOURS
              value: "168"  # Retention period for logs (in hours)
            - name: KAFKA_LOG_SEGMENT_BYTES
              value: "1073741824"  # Size of log segments (1 GB)
            - name: KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS
              value: "300000"  # Interval to check log retention (in ms)
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: "1"  # Default replication factor
            - name: KAFKA_OFFSET_METADATA_MAX_AGE_MS
              value: "10000"  # Maximum age of offset metadata
            - name: KAFKA_CONNECTION_MAX_IDLE_MS
              value: "10000"  # Maximum idle time for connections
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"  # Replication factor for offsets topic
      volumes:
        - name: config
          configMap:
            name: vp-configs
        - name: data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service1
spec:
  selector:
    app: kafka1
  ports:
    - name: client
      port: 9092
      targetPort: 9092
  clusterIP: None  # Headless service for direct pod access
---

#apiVersion: apps/v1
#kind: StatefulSet
#metadata:
#  name: kafka2
#spec:
#  serviceName: "kafka2"
#  replicas: 1
#  selector:
#    matchLabels:
#      app: kafka2
#  template:
#    metadata:
#      labels:
#        app: kafka2
#    spec:
#      containers:
#        - name: kafka2
#          image: confluentinc/cp-kafka:7.4.0
#          ports:
#            - containerPort: 9092
#          volumeMounts:
#            - name: data
#              mountPath: /var/lib/kafka
#            - name: config
#              mountPath: /etc/kafka/server.properties  # Updated path to file
#              subPath: server.properties               # File name reference
#          env:
#            - name: KAFKA_BROKER_ID
#              value: "2"  # Unique ID for this broker
#            - name: KAFKA_ZOOKEEPER_CONNECT
#              value: "zookeeper:2181"
#            - name: KAFKA_ADVERTISED_LISTENERS
#              value: "PLAINTEXT://kafka-service2:9092"  # Required field to fix the error
#            - name: KAFKA_LISTENERS
#              value: "PLAINTEXT://0.0.0.0:9092"
#      volumes:
#        - name: config
#          configMap:
#            name: vp-configs
#        - name: data
#          emptyDir: {}
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: kafka-service2
#spec:
#  selector:
#    app: kafka2
#  ports:
#    - name: client
#      port: 9092
#      targetPort: 9092
#  clusterIP: None  # Headless service for direct pod access
#---
#
#apiVersion: apps/v1
#kind: StatefulSet
#metadata:
#  name: kafka3
#spec:
#  serviceName: "kafka3"
#  replicas: 1
#  selector:
#    matchLabels:
#      app: kafka3
#  template:
#    metadata:
#      labels:
#        app: kafka3
#    spec:
#      containers:
#        - name: kafka3
#          image: confluentinc/cp-kafka:7.4.0
#          ports:
#            - containerPort: 9092
#          volumeMounts:
#            - name: data
#              mountPath: /var/lib/kafka
#            - name: config
#              mountPath: /etc/kafka/server.properties  # Updated path to file
#              subPath: server.properties               # File name reference
#          env:
#            - name: KAFKA_BROKER_ID
#              value: "3"  # Unique ID for this broker
#            - name: KAFKA_ZOOKEEPER_CONNECT
#              value: "zookeeper:2181"
#            - name: KAFKA_ADVERTISED_LISTENERS
#              value: "PLAINTEXT://kafka-service3:9092"  # Required field to fix the error
#            - name: KAFKA_LISTENERS
#              value: "PLAINTEXT://0.0.0.0:9092"
#      volumes:
#        - name: config
#          configMap:
#            name: vp-configs
#        - name: data
#          emptyDir: {}
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: kafka-service3
#spec:
#  selector:
#    app: kafka3
#  ports:
#    - name: client
#      port: 9092
#      targetPort: 9092
#  clusterIP: None  # Headless service for direct pod access

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: mysql-root-password
            - name: MYSQL_ROOT_HOST
              value: "%"
          volumeMounts:
            - name: init-script-volume
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: init-script-volume
          configMap:
            name: mysql-init-script
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service-deployment
  labels:
    app: notification-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: notification-app
  template:
    metadata:
      labels:
        app: notification-app
    spec:
      containers:
        - name: notification-app
          image: adityamaskar1/vp-notification-service
          ports:
            - containerPort: 1235
          env:
            - name: eureka.client.serviceUrl.defaultZone
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: discovery-service-url
            - name: spring.kafka.bootstrap-servers
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: kafka-broker
            - name: spring.zipkin.base-url
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: zipkin-url
---
apiVersion: v1
kind: Service
metadata:
  name: notification-app-service
spec:
  selector:
    app: notification-service
  ports:
    - protocol: TCP
      port: 1235
      targetPort: 1235
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vp-app-deployment
  labels:
    app: vp-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vp-app
  template:
    metadata:
      labels:
        app: vp-app
    spec:
      containers:
        - name: vp-app
          image: adityamaskar1/visitor-management-project:2.3
          ports:
            - containerPort: 8080
          env:
            - name: spring.datasource.password
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: mysql-root-password
            - name: eureka.client.serviceUrl.defaultZone
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: discovery-service-url
            - name: spring.datasource.url
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: db-url
            - name: spring.kafka.bootstrap-servers
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: kafka-broker
            - name: spring.zipkin.base-url
              valueFrom:
                configMapKeyRef:
                  name: vp-configs
                  key: zipkin-url
            - name: server.port
              value: "8080"
---
apiVersion: v1
kind: Service
metadata:
  name: vp-app-service
spec:
  type: LoadBalancer
#  type: ClusterIP
  selector:
    app: vp-app
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 32002
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zipkin-deployment
  labels:
    app: zipkin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zipkin
  template:
    metadata:
      labels:
        app: zipkin
    spec:
      containers:
        - name: zipkin
          image: openzipkin/zipkin:latest
          ports:
            - containerPort: 9411
          env:
            - name: STORAGE_TYPE
              value: "mem"  # In-memory storage (customizable)
---
apiVersion: v1
kind: Service
metadata:
  name: zipkin-service  # Service name different from Deployment
  labels:
    app: zipkin
spec:
  type: LoadBalancer  # Expose Zipkin through a LoadBalancer
  ports:
    - port: 9411
      targetPort: 9411
      nodePort: 32003
  selector:
    app: zipkin
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-discovery-deployment
  labels:
    app: service-discovery
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service-discovery
  template:
    metadata:
      labels:
        app: service-discovery
    spec:
      containers:
        - name: service-discovery
          image: adityamaskar1/vp-discovery-server
          ports:
            - containerPort: 8761
---
apiVersion: v1
kind: Service
metadata:
  name: service-discovery-service
spec:
  type: LoadBalancer
  selector:
    app: service-discovery
  ports:
    - protocol: TCP
      port: 8761
      targetPort: 8761
      nodePort: 32001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-app-deployment
  labels:
    app: react-app
spec:
  replicas: 1  # Adjust based on the load
  selector:
    matchLabels:
      app: react-app
  template:
    metadata:
      labels:
        app: react-app
    spec:
      containers:
        - name: react-app-container
          image: adityamaskar1/vp-react-ui:latest  # Use your Docker image here
          ports:
            - containerPort: 80  # Nginx exposes port 80
#          env:
#            - name: VITE_BASE_API_URL
#              value: "http://backend:8080"  # Backend service URL inside Kubernetes
#          resources:
#            limits:
#              memory: "512Mi"
#              cpu: "500m"
#            requests:
#              memory: "256Mi"
#              cpu: "250m"
#      imagePullSecrets:
#        - name: regcred  # If using private Docker registry, else remove this section

---
apiVersion: v1
kind: Service
metadata:
  name: react-app-service
  labels:
    app: react-app
spec:
  selector:
    app: react-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 32004
  type: LoadBalancer

